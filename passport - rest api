composer require laravel/passport

Add service provider
Laravel\Passport\PassportServiceProvider::class,

php artisan migrate:fresh

php artisan passport:install --force


In user model file

use Laravel\Passport\HasApiTokens 
in class 
use HasApiTokens


In authServieProvider boot function
use Laravel\Passport\Passport

passport::routes();


In config/auth.php
change guards array api section change drivers

'api' => [
	'driver' => 'passport',
    'provider' => 'users',
]


routes/api.php

Route::post('login', 'API\PassportController@login');
Route::post('register', 'API\PassportController@register');

Route::group(['middleware'=>'auth:api'], function(){
	Route::post('get-details', 'API\PassportController@getDetails');
});


php artisan make:controller API\\PassportController



.............. Controller ....................

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class PassportController extends Controller
{
	protected $successStatus = 201;	
    public function login(){
		if(Auth::attempt(['email'=> request('email'), 'password' => request('password') ])) {
			$user = Auth::user();
			$success['token'] = $user->createToken('MyApp')->accessToken;
			return response()->json(['success' => $success], $this->successStatus);
		} else {
			return response()->json(['error'=>'Unauthorized'], 401);
		}
	}

	public function register( Request $request ) 
	{
		$validator = Validator::make($request->all(), [
			'name' => 'required',
			'email' => 'required|email',
			'password' => 'required'
		]);

		if($validator->fails()) {
			return response()->json(['error'=> $validator->errors()], 401);
		}
		$input = $request->all();
		$input['password'] = bcrypt($input['password']);
		$user = User::create($input);
		$success['token'] = $user->createToken('MyApp')->accessToken;
		$success['name'] = $user->name;
		return response()->json(['success'=>$success], $this->successStatus);
	}


	public function getDetails() 
	{
		$user= Auth::user();
		return response()->json(['success'=>$user], $this->successStatus);
	}
}



....................................

chrome postman 

get-details
header
Authorization , Bearer login-token
Accept, application/json					 


